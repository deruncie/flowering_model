}
SFT_array
rm(list = ls())
jaeger_model = function(t,X,parms=NULL,...){
# X: protein concentrations and developmental state
# X[1]: FT
# X[2]: TFL1
# X[3]: FD
# X[4]: LFY
# X[5]: AP1
# X[6]: Num. Leaves
# X[7]: increase in Num. Leaves. Set to 0 once AP1 > 0.2
with(as.list(parms),{
# recover()
#Hub protein-Protein Binding
#FT:FD
x_13 = K_23*X[1]*X[3]/(K_13*K_23 + K_13*X[2]+K_23*X[1])
#TFL1:FD
x_23 = K_13*X[2]*X[3]/(K_13*K_23 + K_13*X[2]+K_23*X[1])
#Hub Gene Activation
#LFY -> FD
p_4_3 = X[4]^h_4_3 / (K_4_3^h_4_3 + X[4]^h_4_3)
#FT:FD -> LFY
p_13_4 = K_23_4^h_23_4 * x_13^h_13_4 / (K_13_4^h_13_4 * K_23_4^h_23_4 + K_23_4^h_23_4*x_13^h_13_4 + K_13_4^h_13_4*x_23^h_23_4)
#TFL1:FD -> LFY
p_23_4 = K_13_4^h_13_4 * x_23^h_23_4 / (K_13_4^h_13_4 * K_23_4^h_23_4 + K_23_4^h_23_4*x_13^h_13_4 + K_13_4^h_13_4*x_23^h_23_4)
#AP1 -> LFY
p_5_4 = X[5]^h_5_4 / (K_5_4^h_5_4 + X[5]^h_5_4)
#FT:FD -> AP1
p_13_5 = K_23_5^h_23_5 * x_13^h_13_5 / (K_13_5^h_13_5 * K_23_5^h_23_5 + K_23_5^h_23_5*x_13^h_13_5 + K_13_5^h_13_5*x_23^h_23_5)
#TFL1:FD -> AP1
p_23_5 = K_13_5^h_13_5 * x_23^h_23_5 / (K_13_5^h_13_5 * K_23_5^h_23_5 + K_23_5^h_23_5*x_13^h_13_5 + K_13_5^h_13_5*x_23^h_23_5)
#LFY -> AP1
p_4_5 = X[4]^h_4_5 / (K_4_5^h_4_5 + X[4]^h_4_5)
rho = matrix(0,nr=5,nc=3)
rho[,1] = 1
rho[1,1] = 1; rho[1,2] = 0; rho[1,3] = 0
rho[2,2] = T_f^h_5_2 / (T_f^h_5_2  + X[5]^h_5_2); rho[2,3] = 0; rho[2,1] = 1 - rho[2,2] # should this be in there? Otherwise it doesn't sum to 1;
rho[3,2] = p_4_3; rho[3,1] = 1 - rho[3,2]; rho[3,3] = 0
rho[4,1] = (1 - p_13_4 - p_23_4) * (1-p_5_4); rho[4,2] = p_13_4*(1-p_5_4) + (1 - p_13_4 - p_23_4)*p_5_4; rho[4,3] = p_13_4*p_5_4
rho[5,1] = (1 - p_13_5 - p_23_5) * (1-p_4_5); rho[5,2] = p_13_5*(1-p_4_5) + (1 - p_13_5 - p_23_5)*p_4_5; rho[5,3] = p_13_5*p_4_5
v = matrix(0,nr=5,nc=3)
v[,1] = c(eta_leaf * X[6], v1[2:5])
v[,2] = v2
v[,3] = v3  # check this. c(NA,rep(0,1,4))
v = v_35S + rowSums(rho * v)
V = rep(0,length(X))
V[1:5] = v*(1-mutants) 	# If a gene is mutated, set it's change = 0
V[6] = X[7]		# change in # leaves
V = V - delta*X  # subtract degradation
return(list(
Derivitaves = V,
globals = c(
x_13=x_13,
x_23=x_23,
p_13_4 = p_13_4,
p_13_5 = p_13_5,
p_23_4 = p_23_4,
p_23_5 = p_23_5,
p_4_3 = p_4_3,
p_4_5 = p_4_5,
p_5_4 = p_5_4
)
))
})
}
time_scale = 1  # shifts the timescale by scaling both delta and vs and eta_leaf
init = c(0, 0.6, 0.1, 0.1, 0, 0, 1) # Starts with some FD and LFY, and with a leaf production rate = 1 per unit t.
t = seq(0,200,by=0.1)
v_lfy = 0.05;v_ap1 = 0.05
parms_ori = list(
K_13 = 0.39381,
K_23 = 3.2556,
K_4_3 = 0.28203,
K_23_4 = 9.3767,
K_13_4 = 0.040555,
K_23_5 = 0.033666,
K_13_5 = 0.029081,
K_4_5 = 0.13032,
K_5_4 = 0.28606,
h_4_3 = 4.00,
h_23_4 = 3.8497,
h_13_4 = 4.00,
h_23_5 = 4.00,
h_13_5 = 1.8217,
h_4_5 = 3.9369,
h_5_4 = 3.6732,
h_5_2 = 1.0239,
delta    = c(time_scale*2*c(0.05,0.05,0.05,v_lfy,v_ap1),0,0),
v_35S    = time_scale*c(rep(0, 5)),		#check this.
v1       = time_scale*1*c(0, 0.01, 0.01, 0.01, 0),
v2       = time_scale*1*c(0.05,0.05,0.05,v_lfy,v_ap1),
v3       = time_scale*2*c(0.05,0.05,0.05,v_lfy,v_ap1),
eta_leaf = time_scale*0.01, #eta_leaf = time_scale*0.01
T_f = 0.2,
mutants = rep(0,5),
repression = 1
# x_1 <- (parms_ori$v1[1] + parms_ori$v_35S[1])/parms_ori$delta[1],
# x_2 <- (parms_ori$v1[2] + parms_ori$v_35S[2])/parms_ori$delta[2],
# x_3 <- (parms_ori$v1[3] + parms_ori$v_35S[3])/parms_ori$delta[3],
# x_4 <- (parms_ori$v1[4] + parms_ori$v_35S[4])/parms_ori$delta[4],
# x_5 <- (parms_ori$v1[5] + parms_ori$v_35S[5])/parms_ori$delta[5],
# protein_conc <- c(x_1, x_2, x_3, x_4, x_5, 0, 1)
)
parms_ori$init <- init
root_fun = function(t,y,parms,...){
# This tells the ODE solver to trigger an event. It returns a vector. Events are triggered each time an element = 0.
return(c(y[5]-0.2,y[5]-0.3))
}
# Can use eventsdat to specific changes in pararmeters at specific points in time
# ex. change in FT at certain time
eventsdat = data.frame(var=c(1,2),time=10,value=c(1,0),method='rep')
# eventsfun is called whenever a root is reached
eventsfun = function(time = t,y = parms$init,parms,...){
if(y[5] > 0.3) y[7] = 0
y
}
terminalroot = 3 # The 2nd root causes the simulation to stop
fit_model_ori = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = jaeger_model,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
predict_leaves = function(parms){
s1 = fit_model_new(parms)
return(attributes(s1)[['troot']])
}
exp_35S = 1
genotype_parms = function(genotype,parms){
new_parms <- parms #parms
new_parms$init <- init
#Col 					#check
if(genotype == '35S:FT'){ #check
new_parms$v_35S[1] = exp_35S #1.3-1.8
new_parms$init <- c(10, 0.1, 0.1, 0.1, 0, 0, 0)
}
if(genotype == '35S:LFY'){
new_parms$v_35S[4] = exp_35S #nothing gets is fast enough (minimum = 5 Ros leaves)
new_parms$init <- c(0, 0.6, 0.1, 10.1, 0, 0, 1)
}
if(genotype == '35S:TFL1'){ #not with this parameter
new_parms$v_35S[2] = exp_35S #1
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'lfy-12'){   #check
new_parms$mutants[4] = 1
# new_parms$init <- c(0, 0.6, 0.1, 0, 0, 0, 1)
}
if(genotype == 'ft-10'){	#check
new_parms$mutants[1] = 1
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl-1'){   #check
new_parms$mutants[2] = 1
# new_parms$init <- c(0, 0, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fd-2'){    #check
new_parms$mutants[3] = 0.75
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fdp-1'){   #check
new_parms$mutants[3] = 0.2
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fd-2 fdp-1'){   #check
new_parms$mutants[3] = 0.95
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:TFL1 fd-2'){  #check, exp_35S = 1
new_parms$v_35S[2] = exp_35S
new_parms$mutants[3] = 0.75
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl1-1 fd-2'){   #check
new_parms$mutants[2] = 1
new_parms$mutants[3] = 0.75
# new_parms$init <- c(0, 0, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:FT fd-2'){   #check at exp_35S = 1.0
new_parms$v_35S[1] = exp_35S
new_parms$mutants[3] = 0.75
new_parms$init <- c(10, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl1-1 fd-2 fdp-1'){  #check
new_parms$mutants[2] = 1
new_parms$mutants[3] = .95
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:TFL1 fd-2 fdp-1'){  #check
new_parms$v_35S[2] = exp_35S
new_parms$mutants[3] = .95
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:FT fd-2 fdp-1'){  #check, regardless of exp_35S
new_parms$v_35S[1] = exp_35S
new_parms$mutants[3] = .95
new_parms$init <- c(10, 0.6, 0.1, 0.1, 0, 0, 1)
}
return(new_parms)
}
predict_genotype = function(genotype,parms){
new_parms = genotype_parms(genotype,parms)
new_parms$init[1:5] = new_parms$init[1:5] * (1-new_parms$mutants)
return(predict_leaves(new_parms))
}
new_parms <- parms_ori
s1 <- fit_model_new(parms_ori)
sourceCpp("Silly.cpp")
s1 <- fit_model_new(parms_ori)
eventsfun = function(time = t,y = parms$init,parms,...){
if(y[5] > 0.3) y[7] = 0
y
browser()
}
eventsfun = function(time = t,y = parms$init,parms,...){
if(y[5] > 0.3) y[7] = 0
y
browser()
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
y
eventsfun = function(t,y,parms,...){
if(y[5] > 0.3) y[7] = 0
y
browser()
}
eventsfun = function(t,y,parms,...){
if(y[5] > 0.3) y[7] = 0
y
browser()
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
y
y
Func(times[1], y)
tmp
rho
eval(Func(times[1], y), rho)
# eventsfun is called whenever a root is reached
eventsfun = function(t,y,parms,...){
# if(y[5] > 0.3) y[7] = 0
y
# browser()
}
eventsfun = function(t,y,parms,...){
# if(y[5] > 0.3) y[7] = 0
y
# browser()
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
ls()
y
times
pred = predict_genotype(gen,parms_ori)*time_scale
gen
eventsfun
jaeger_model
c_jaeger_model_V3
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
# func = c_jaeger_model_V3,
func = jaeger_model,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
pred = predict_genotype(gen,parms_ori)*time_scale
pred
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
# func = jaeger_model,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
pred = predict_genotype(gen,parms_ori)*time_scale
gen
gen = 'Col'
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
pred
predict_genotype
genotype= gen
parms = parms_ori
new_parms = genotype_parms(genotype,parms)
new_parms$init[1:5] = new_parms$init[1:5] * (1-new_parms$mutants)
new_parms
predict_genotype
predict_leaves(new_parms)
predict_leaves
s1 = fit_model_new(parms)
head(s1)
parms
sourceCpp("Silly.cpp")
s1 = fit_model_new(parms)
t = seq(0,1,by=0.1)
s1 = fit_model_new(parms)
as
sdfasdf
s1 = fit_model_new(parms)
t = seq(0,.2,by=0.1)
s1 = fit_model_new(parms)
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
# func = jaeger_model,
parms=parms,
method='euler',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
s1 = fit_model_new(parms)
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
# func = jaeger_model,
parms=parms,
method='euler')
# rootfun = root_fun,
# events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
s1 = fit_model_new(parms)
sourceCpp("Silly.cpp")
s1 = fit_model_new(parms)
sourceCpp("Silly.cpp")
sourceCpp("Silly.cpp")
sourceCpp("Silly.cpp")
s1 = fit_model_new(parms)
sourceCpp("Silly.cpp")
sourceCpp("Silly.cpp")
t = seq(0,200,by=0.1)
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
# func = jaeger_model,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
data_model
genotype_parms = function(genotype,parms){
new_parms <- parms #parms
new_parms$init <- init
#Col 					#check
if(genotype == '35S:FT'){ #check
new_parms$v_35S[1] = exp_35S #1.3-1.8
new_parms$init <- c(10, 0.1, 0.1, 0.1, 0, 0, 0)
}
if(genotype == '35S:LFY'){
new_parms$v_35S[4] = exp_35S #nothing gets is fast enough (minimum = 5 Ros leaves)
new_parms$init <- c(0, 0.6, 0.1, 10.1, 0, 0, 1)
}
if(genotype == '35S:TFL1'){ #not with this parameter
new_parms$v_35S[2] = exp_35S #1
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'lfy-12'){   #check
new_parms$mutants[4] = 1
# new_parms$init <- c(0, 0.6, 0.1, 0, 0, 0, 1)
}
if(genotype == 'ft-10'){	#check
new_parms$mutants[1] = 1
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl-1'){   #check
new_parms$mutants[2] = 1
# new_parms$init <- c(0, 0, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fd-2'){    #check
new_parms$mutants[3] = 0.75
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fdp-1'){   #check
new_parms$mutants[3] = 0.2
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'fd-2 fdp-1'){   #check
new_parms$mutants[3] = 0.95
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:TFL1 fd-2'){  #check, exp_35S = 1
new_parms$v_35S[2] = exp_35S
new_parms$mutants[3] = 0.75
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl1-1 fd-2'){   #check
new_parms$mutants[2] = 1
new_parms$mutants[3] = 0.75
# new_parms$init <- c(0, 0, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:FT fd-2'){   #check at exp_35S = 1.0
new_parms$v_35S[1] = exp_35S
new_parms$mutants[3] = 0.75
new_parms$init <- c(10, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == 'tfl1-1 fd-2 fdp-1'){  #check
new_parms$mutants[2] = 1
new_parms$mutants[3] = .95
# new_parms$init <- c(0, 0.6, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:TFL1 fd-2 fdp-1'){  #check
new_parms$v_35S[2] = exp_35S
new_parms$mutants[3] = .95
new_parms$init <- c(0, 10.7, 0.1, 0.1, 0, 0, 1)
}
if(genotype == '35S:FT fd-2 fdp-1'){  #check, regardless of exp_35S
new_parms$v_35S[1] = exp_35S
new_parms$mutants[3] = .95
new_parms$init <- c(10, 0.6, 0.1, 0.1, 0, 0, 1)
}
return(new_parms)
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
data_model
init
parms_ori
eventsfun = function(t,y,parms,...){
if(y[5] > 0.3) y[7] = 0
y
# browser()
}
fit_model_new = function(parms){
s1 <- ode(y = c(parms$init),
times = t,
func = c_jaeger_model_V3,
# func = jaeger_model,
parms=parms,
method='lsoda',
rootfun = root_fun,
events = list(func = eventsfun,root=T,terminalroot=terminalroot))
return(s1)
}
data_model = read.delim('Jaeger_data_New.csv',sep=',')
data_model$pred_R = NA
data_model$pred_C = NA
for(gen in data_model$Genotype){
i = data_model$Genotype == gen
pred = predict_genotype(gen,parms_ori)*time_scale
data_model$pred_R[i] = pred[1]
data_model$pred_C[i] = pred[2]-pred[1]
}
data_model
